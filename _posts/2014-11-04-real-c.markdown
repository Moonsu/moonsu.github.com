---
layout: post
title: C언어로 구구단을 구현해보자.
date:   2014-11-04 19:29:56
categories: C++
---

구구단은 문법기초 배울 때나 하는 것??
---
C 언어를 제일 처음 시작하면서 변수나 함수의 구조를 배운다. 이때는 보통 널리 알려진 "Hello, world!!"라는 문장을 출력해보는 것으로 시작한다. 어쩌다 보니 이 문장이 프로그래밍 과정에서 빠지지 않는 유명한 문구가 되어 버렸다.

그 다음으로 간단한 제어문과 출력문을 배운 후에 프로그램같은 프로그램으로, 구구단을 만들어본다. C 언어 과정에서 구구단을 짜보지 않은 사람 또한 드물 정도로 단골손님이다.

그런데 이 구구단을 제대로 짜보고 넘어가는 사람은 의외로 드물다. 문법을 처음 배우는 시점이라서 프로그램을 작성한다는게 힘들기는 하다. 그 때문에 배우는 사람들 중 절반이상은 이미 만들어진 것을 보고 베껴보는 정도로 넘어가고, 그 나머지 중의 절반은 포기를 하며, 나머지 인원들은 75~80%의 사람들에게 배포(?)할 목적으로 아주 허덥한 구구단을 작성한다.

초보라서 그런 것인지, 실력없는 사람들이 너무 뛰어난 코드로 인해서 눈에 띄지 않도록 하기 위한 배려인지는 모르겠으나 아무튼 효율적인 코드를 작성해보는 사람은 드문 것이 사실이다.


소스코드가 눈앞에 그려지는가?

다음의 프로그램을 작성한다고 상상해보라.
문제 1. for문 2개와 printf() 한개만으로 구구단 2단~9단까지 출력하는 프로그램을 작성하라.
문제 2. for문 1개만으로 구구단 2단~9단까지 출력하는 프로그램을 작성하라.
문제 3. 위의 문제 1, 2번을 가로로 3단씩 출력하도록 수정하라.

머릿속에 소스코드가 그려지는가? 아니면 낙서가 그려지는가? 

위의 문제들이 모두 쉽게 머릿속에 그려진다면, 초보과정을 충분히 마쳤다고 할 수 있다. 하지만 자칭 수업 열심히 들었다고, 공부좀 했다고 하더라도 코드들이 머릿속을 헤엄쳐다니고 있다면 다시금 공부할 것을 적극 권장한다.


초보자의 눈높이
---
아무래도 구구단을 짜려면 for 혹은 while과 같은 순환문과 printf()와 같은 출력함수가 필요하겠다. 그렇다면 제어문과 출력문을 모두 배운 사람만이 구구단 프로그램을 작성할 수 있다는 얘기다.
하지만... 틀렸다. 순환문을 몰라도 작성할 수 있다.

이 글을 읽는 사람들 중에 설마... 하며 눈치를 챈 사람도 있을 것이다. 바로 2단부터 9단까지 총 72개의 printf()를 사용하면 문제는 해결된다.


void main(void) {

    printf("2 x 1 =  2\n");

    printf("2 x 2 =  3\n");

    .....

    /* 68개의 코드 중간생략  */

    .....

    printf("9 x 8 = 72\n");

    printf("9 x 9 = 81\n");

 }


일반적으로 C 문법을 배우는 과정에서 문법들을 활용하고자 하는 차원에서 구구단을 작성한다. 그렇기 때문에 가능한 소스가 간결해 보이면서도 배운 것들을 활용할 수 있도록 작성하기 마련이다. 그리고 실제 대부분의 선생이나 교수들도 무조건 간결하게 그리고 여러가지 배운 것을 사용한 소스에만 점수를 높게 준다.

하지만, 위의 소스는 메모리용량을 더 소모하더라도 최고의 속도를 낼 수 있게 하기 위한 고난이도(?)의 작품이다. 일반적으로 소스의 라인수가 적을수록 좋은 코드라고 착각하기 쉽다. 말 그대로 착각일 뿐이다.

위의 프로그램은 printf()가 72번 호출될 뿐, 그 어떤 작업도 필요하지 않다.


대량생산 버전의 구구단
---
아마 대부분의 구구단이 아래와 같은 방식으로 작성되었을 것이다. 맞고 틀리고 할 것도 없다. 순환문이랑 출력문 배웠을 때 구구단 짜라고 하면 이것 밖에는 없다. 나름대로 조금 더 배웠다 싶으면 입력문을 추가해서 작성할 뿐, 별반 차이는 없다.

void main(void)
{
    int i, j;
    for( i = 2; i < 10; i++ )
        for( j = 1; j < 10; j++ )
            printf("%d x %d = %2d\n", i, j, i * j );
}


필자가 이 코드에 변화를 주어서 좀 다르게 해보려 했지만, 더 이상의 방법이 떠오르질 않을 정도로 완벽(?)에 가까운 대중적인 소스코드다.

그렇다면, 문제 3번을 적용시켜보자. 원래 기본 소스 자체가 너무나 알려진 것이고, 일반적으로 머릿속에 쉽게 그려질 수 있는 것이라 문제 3번의 적용 또한 아주 간단하다.

하지만 3단씩 출력시에는 for()문 세개를 사용하는 것이 일반적이기 때문에, for()문을 두개만 사용하기 위해서는 생각하는 기준을 약간 달리해야 한다.

void main(void)
{
 #define MULTIPLICAND ( i + ( j - 1 ) % 3 )
 #define MULTIPLIER ( 1 + ( j - 1 ) / 3 )

    int i, j;
    for( i = 2; i < 10; i+=3 )
    {
        for( j = 1; j < 10; j++ )
        {
            /* 2단부터 9단까지므로 10단 제외 */
            if( MULTIPLICAND < 10 )
                printf("%d x %d = %2d\t", MULTIPLICAND, MULTIPLIER,
                                          MULTIPLICAND * MULTIPLER );
            if( j % 3 == 0 ) printf("\n");
        }
    }
}

