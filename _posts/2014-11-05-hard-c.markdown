---
layout: post
title: C언어를 이용한 구구단 심화.
date:   2014-11-05 19:29:56
categories: C++
---

난이도를 조금 더 높여보자
---

가끔 미친 척하고 이상한 문제를 내는 경우가 있다. for문을 단 1개만 사용해서 구구단을 작성하라는 문제가 바로 대표적이다.
위에서 언급한 대량생산 버전인 구구단 소스에 익숙한 사람들은 for문 한개를 사용하라고 하면 제법 당황한다. 왜냐면 구구단에서는 두 개의 숫자가 각각 증가하여야 하는데 순환문을 1개만 사용하라니까 갑갑하고 답답해서 미칠 지경에 이른다.

<img src="/images/code4.png" title="J & H" class="img_left" alt="??" />
사실 인터넷 같은 곳엘 뒤적거리다보면 만날 수 있는 소스 중의 하나인 것은 사실이다. 어쩌면 자신의 생각과 똑같다고 생각한 사람도 있을 것이다. 조금은 무식한 듯 보이면서도 문제해결은 가능한 소스임에는 틀림없다.

하지만 점수가 달린 경우라면 얘기가 다르다. 앞에서도 언급했듯이 가급적이면 소스크드가 간결해 보이도록 하는 것을 원하는 경우가 많기 때문이다. 그리고 다른 사람들이 봐서도 "아하~"라는 말이 나오는 소스가 점수를 잘 받기 마련이다.

<img src="/images/code5.png" title="J & H" class="img_left" alt="??" />

이 소소를 3단으로 출력하려면 머리가 조금 아파진다. 하지만 별다른 알고리즘은 아니고, 단지 계산만 잘 해보면 답이 나온다. 이걸 외우려고 하진 말기 바란다. 필자가 대충 끄적여 본 소스인데다, 막말로 이런거 외워봤자 돈 안된다. 그냥 경험삼아 재미삼아 한번 보기 바란다.

<img src="/images/code6.png" title="J & H" class="img_left" alt="??" />

다양하게 생각하자
---

이전에 나왔던 소스들은 모두가 선행조건을 중심으로 문제를 해결한 방식이다. 이걸 연역적 방법이라고 해야하나... 아무튼 원인이 되는 수식 만드는 것을 먼저하고, 그런 후에 그에 따른 결과가 출력되도록 생각하는 방식이다. 사람들이 일반적으로 생각하는 방식이기도 하다.

조금전에 보여준 소스는 그와는 반대로 귀납적 방법에 의한 구현으로 되어 있다. 즉, 원하는 결과값을 대상으로, 그것을 얻기 위한 방법을 만든 것이다. 수식을 먼저 만들 생각을 한다면 a x b 가 되니까 두개의 숫자를 증가시킬 방법을 찾게 된다. 그래서 for문의 개수가 2개부터 시작하는 것이다.

반면에 결과값을 놓고 생각하게 되면 이것은 1차원 배열 하나일 뿐이다. 그렇기에 for문 1개만으로도 해결이 가능하게 된 것이다. 결과는 같지만 접근 방법에 따라서 구현 방법 또한 달라지게 되는 것이다.

하지만 여기서 말하는 귀납적 방법이란 것이 프로그래밍을 학문적으로 따졌을 때 말하는 것과는 차이가 있을 수 있다. 필자는 단지 문제접근 방법에 있어서의 차이점을 말하고자 하는 것이다.
프로그래머는 똑같은 사물이나 현상을 보더라도, 그것을 구현하고자 할 때에는 전혀 다른 방식으로 접근을 해야 하는 경우가 많다. 상식적인 방법으로는 구현이 불가능하거나 혹은 엄청난 비효율을 가져올 수 있기 때문이다. 특히 인공지능이 관련된 분야에서는 더더욱 그러하다. 
